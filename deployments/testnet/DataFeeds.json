{
  "address": "0x973b0dF6aA45f78AbFa594Acb0F213e7a6E58440",
  "abi": [
    {
      "inputs": [],
      "name": "WrongMaxNumber",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "bytes_",
          "type": "bytes"
        }
      ],
      "name": "getNumbersFromBytes",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "from_",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "to_",
          "type": "uint8"
        }
      ],
      "name": "getOrderedArray",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt_",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "maxNumber_",
          "type": "uint8"
        }
      ],
      "name": "getRandomBingoNumbers",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt_",
          "type": "bytes32"
        }
      ],
      "name": "getRandomLotto_6_49",
      "outputs": [
        {
          "internalType": "bytes6",
          "name": "",
          "type": "bytes6"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x377e7a8ae15558cd77208169861f5302e38f5c6061cf7a88c729c52b7568ec55",
  "receipt": {
    "to": null,
    "from": "0x340D999F5DD91CBB5Dd61f79825AD26685E195c5",
    "contractAddress": "0x973b0dF6aA45f78AbFa594Acb0F213e7a6E58440",
    "transactionIndex": 0,
    "gasUsed": "783146",
    "logsBloom": "0x
    "blockHash": "0xc808e6552af1115c096a90b14cce22f2813abd1b3ee73aac379f3bc2b85acee9",
    "transactionHash": "0x377e7a8ae15558cd77208169861f5302e38f5c6061cf7a88c729c52b7568ec55",
    "logs": [],
    "blockNumber": 39405302,
    "cumulativeGasUsed": "783146",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e0a4827a1746a48ede1c3f2751fd505e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WrongMaxNumber\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytes_\",\"type\":\"bytes\"}],\"name\":\"getNumbersFromBytes\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"from_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"to_\",\"type\":\"uint8\"}],\"name\":\"getOrderedArray\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt_\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"maxNumber_\",\"type\":\"uint8\"}],\"name\":\"getRandomBingoNumbers\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt_\",\"type\":\"bytes32\"}],\"name\":\"getRandomLotto_6_49\",\"outputs\":[{\"internalType\":\"bytes6\",\"name\":\"\",\"type\":\"bytes6\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DataFeeds.sol\":\"DataFeeds\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/DataFeeds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport './interfaces/IDataFeeds.sol';\\n\\nerror WrongMaxNumber();\\n\\ncontract DataFeeds is IDataFeeds {\\n  function getRandomLotto_6_49(bytes32 salt_) external view returns(bytes6) {\\n    bytes32 random = keccak256(abi.encodePacked(block.prevrandao, block.number, block.timestamp));\\n\\n    uint8[] memory orderedArray = getOrderedArray(1, 49);\\n    uint8[6] memory resultNumbers;\\n\\n    for (uint8 i = 0; i < 6; i += 1) {\\n      uint randomNumber = uint256(keccak256(abi.encodePacked(\\n        salt_[i + 4], salt_[i + 3], salt_[i + 2], salt_[i + 1], salt_[i],\\n        random[i], random[i + 1], random[i + 2], random[i + 3], random[i + 4]\\n      )));\\n      uint index = _getRoundNumber(randomNumber, 48 - i);\\n      resultNumbers[i] = orderedArray[index];\\n      orderedArray[index] = orderedArray[orderedArray.length - 1 - i];\\n    }\\n\\n    return bytes6(abi.encodePacked(resultNumbers[0], resultNumbers[1], resultNumbers[2], resultNumbers[3], resultNumbers[4], resultNumbers[5]));\\n  }\\n\\n  function getRandomBingoNumbers(bytes32 salt_, uint8 maxNumber_) external view returns(bytes memory) {\\n    if (maxNumber_ > 96) revert WrongMaxNumber();\\n    if (maxNumber_ == 0) revert WrongMaxNumber();\\n\\n    bytes memory random = abi.encodePacked(\\n      keccak256(abi.encodePacked(block.number, salt_)),\\n      keccak256(abi.encodePacked(block.prevrandao, salt_)),\\n      keccak256(abi.encodePacked(block.timestamp, salt_))\\n    );\\n    uint8[] memory orderedArray = getOrderedArray(1, maxNumber_);\\n\\n    bytes memory result = new bytes(maxNumber_);\\n\\n    for (uint8 i = 0; i < maxNumber_ - 1; i += 1) {\\n      uint randomNumber = uint256(keccak256(abi.encodePacked(random[i])));\\n      uint index = _getRoundNumber(randomNumber, maxNumber_ - i - 1);\\n      result[i] = bytes1(orderedArray[index]);\\n      orderedArray[index] = orderedArray[maxNumber_ - 1 - i];\\n    }\\n\\n    result[maxNumber_ - 1] = bytes1(orderedArray[0]);\\n\\n    return result;\\n  }\\n\\n  function getOrderedArray(uint8 from_, uint8 to_) public pure returns(uint8[] memory) {\\n    if (from_ > to_) revert('DataFeeds: Wrong borders');\\n\\n    uint8[] memory result = new uint8[](to_ - from_ + 1);\\n\\n    for (uint8 i = 0; i <= to_ - from_; i += 1) {\\n      result[i] = from_ + i;\\n    }\\n\\n    return result;\\n  }\\n\\n  function getNumbersFromBytes(bytes memory bytes_) public pure returns(uint8[] memory) {\\n    uint8[] memory result = new uint8[](bytes_.length);\\n    for (uint i = 0; i < bytes_.length; i += 1) {\\n      result[i] = uint8(bytes_[i]);\\n    }\\n\\n    return result;\\n  }\\n\\n  // Need big value number >>> maxValue\\n  function _getRoundNumber(uint number_, uint8 maxNumber_) private pure returns(uint8) {\\n    if (maxNumber_ == 0) revert WrongMaxNumber();\\n\\n    return uint8(number_ % (maxNumber_ + 1));\\n  }\\n}\\n\",\"keccak256\":\"0xdbef15a883d1a706a553a0592949e335cc12628d31e2efd2457913e54f23b3d1\",\"license\":\"MIT\"},\"contracts/interfaces/IDataFeeds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IDataFeeds {\\n  function getRandomLotto_6_49(bytes32 salt_) external returns(bytes6);\\n  function getRandomBingoNumbers(bytes32 salt_, uint8 maxNumber_) external returns(bytes memory);\\n  function getOrderedArray(uint8 from_, uint8 to_) external returns(uint8[] memory);\\n  function getNumbersFromBytes(bytes memory bytes_) external returns(uint8[] memory);\\n}\",\"keccak256\":\"0x22ae5c9fd04d93020ce04c75257ac595123279fdb5b0887e2c7b52ed8dc2d568\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d3c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063446b0ef614610051578063473336fe1461007a578063a87b90fb1461009a578063caf82a12146100ad575b600080fd5b61006461005f366004610a44565b6100f1565b6040516100719190610af5565b60405180910390f35b61008d610088366004610b52565b6101a4565b6040516100719190610b7e565b6100646100a8366004610bcd565b6104f3565b6100c06100bb366004610bf7565b61062b565b6040517fffffffffffff00000000000000000000000000000000000000000000000000009091168152602001610071565b60606000825167ffffffffffffffff81111561010f5761010f610a2e565b604051908082528060200260200182016040528015610138578160200160208202803683370190505b50905060005b835181101561019d5783818151811061015957610159610c10565b602001015160f81c60f81b60f81c82828151811061017957610179610c10565b60ff90921660209283029190910190910152610196600182610c3c565b905061013e565b5092915050565b6060808260ff1611156101ca576040516337f8e71160e21b815260040160405180910390fd5b8160ff166000036101ee576040516337f8e71160e21b815260040160405180910390fd5b60408051436020820152908101849052600090606001604051602081830303815290604052805190602001204485604051602001610236929190918252602082015260400190565b604051602081830303815290604052805190602001204286604051602001610268929190918252602082015260400190565b60408051601f198184030181528282528051602091820120908301949094528101919091526060810191909152608001604051602081830303815290604052905060006102b66001856104f3565b905060008460ff1667ffffffffffffffff8111156102d6576102d6610a2e565b6040519080825280601f01601f191660200182016040528015610300576020820181803683370190505b50905060005b610311600187610c4f565b60ff168160ff161015610479576000848260ff168151811061033557610335610c10565b016020908101516040517fff000000000000000000000000000000000000000000000000000000000000009091169181019190915260210160408051601f198184030181529190528051602090910120905060006103a8826001610399868c610c4f565b6103a39190610c4f565b6109cb565b60ff1690508481815181106103bf576103bf610c10565b602002602001015160f81b848460ff16815181106103df576103df610c10565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350848361041b60018b610c4f565b6104259190610c4f565b60ff168151811061043857610438610c10565b602002602001015185828151811061045257610452610c10565b60ff90921660209283029190910190910152506104729050600182610c68565b9050610306565b508160008151811061048d5761048d610c10565b602002602001015160f81b816001876104a69190610c4f565b60ff16815181106104b9576104b9610c10565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350925050505b92915050565b60608160ff168360ff161115610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4461746146656564733a2057726f6e6720626f72646572730000000000000000604482015260640160405180910390fd5b60006105758484610c4f565b610580906001610c68565b60ff1667ffffffffffffffff81111561059b5761059b610a2e565b6040519080825280602002602001820160405280156105c4578160200160208202803683370190505b50905060005b6105d48585610c4f565b60ff168160ff1611610623576105ea8186610c68565b828260ff16815181106105ff576105ff610c10565b60ff9092166020928302919091019091015261061c600182610c68565b90506105ca565b509392505050565b60408051446020820152439181019190915242606082015260009081906080016040516020818303038152906040528051906020012090506000610671600160316104f3565b905061067b610a10565b60005b60068160ff16101561092957600086610698836004610c68565b60ff16602081106106ab576106ab610c10565b1a60f81b876106bb846003610c68565b60ff16602081106106ce576106ce610c10565b1a60f81b886106de856002610c68565b60ff16602081106106f1576106f1610c10565b1a60f81b89610701866001610c68565b60ff166020811061071457610714610c10565b1a60f81b8a8660ff166020811061072d5761072d610c10565b1a60f81b898760ff166020811061074657610746610c10565b1a60f81b8a610756896001610c68565b60ff166020811061076957610769610c10565b1a60f81b8b6107798a6002610c68565b60ff166020811061078c5761078c610c10565b1a60f81b8c61079c8b6003610c68565b60ff16602081106107af576107af610c10565b1a60f81b8d6107bf8c6004610c68565b60ff16602081106107d2576107d2610c10565b6040517fff000000000000000000000000000000000000000000000000000000000000009b8c166020820152998b1660218b0152978a1660228a0152958916602389015293881660248801529187166025870152861660268601528516602785015284166028840152901a60f81b9091166029820152602a0160408051601f19818403018152919052805160209091012090506000610876826103a3856030610c4f565b60ff16905084818151811061088d5761088d610c10565b6020026020010151848460ff16600681106108aa576108aa610c10565b602002019060ff16908160ff1681525050848360ff16600187516108ce9190610c81565b6108d89190610c81565b815181106108e8576108e8610c10565b602002602001015185828151811061090257610902610c10565b60ff90921660209283029190910190910152506109229050600182610c68565b905061067e565b5080516020808301516040808501516060860151608087015160a088015193517fff0000000000000000000000000000000000000000000000000000000000000060f898891b81169782019790975294871b8616602186015291861b85166022850152851b84166023840152841b8316602483015290921b1660258201526026016040516020818303038152906040526109c290610c94565b95945050505050565b60008160ff166000036109f1576040516337f8e71160e21b815260040160405180910390fd5b6109fc826001610c68565b610a099060ff1684610ce4565b9392505050565b6040518060c001604052806006906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610a5657600080fd5b813567ffffffffffffffff80821115610a6e57600080fd5b818401915084601f830112610a8257600080fd5b813581811115610a9457610a94610a2e565b604051601f8201601f19908116603f01168101908382118183101715610abc57610abc610a2e565b81604052828152876020848701011115610ad557600080fd5b826020860160208301376000928101602001929092525095945050505050565b6020808252825182820181905260009190848201906040850190845b81811015610b3057835160ff1683529284019291840191600101610b11565b50909695505050505050565b803560ff81168114610b4d57600080fd5b919050565b60008060408385031215610b6557600080fd5b82359150610b7560208401610b3c565b90509250929050565b60006020808352835180602085015260005b81811015610bac57858101830151858201604001528201610b90565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060408385031215610be057600080fd5b610be983610b3c565b9150610b7560208401610b3c565b600060208284031215610c0957600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156104ed576104ed610c26565b60ff82811682821603908111156104ed576104ed610c26565b60ff81811683821601908111156104ed576104ed610c26565b818103818111156104ed576104ed610c26565b6000815160208301517fffffffffffff000000000000000000000000000000000000000000000000000080821693506006831015610cdc5780818460060360031b1b83161693505b505050919050565b600082610d0157634e487b7160e01b600052601260045260246000fd5b50069056fea2646970667358221220f5965ba1451203a77e17789170cb2c650dd37a3d549d907a9b0c5f4cc37278a664736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063446b0ef614610051578063473336fe1461007a578063a87b90fb1461009a578063caf82a12146100ad575b600080fd5b61006461005f366004610a44565b6100f1565b6040516100719190610af5565b60405180910390f35b61008d610088366004610b52565b6101a4565b6040516100719190610b7e565b6100646100a8366004610bcd565b6104f3565b6100c06100bb366004610bf7565b61062b565b6040517fffffffffffff00000000000000000000000000000000000000000000000000009091168152602001610071565b60606000825167ffffffffffffffff81111561010f5761010f610a2e565b604051908082528060200260200182016040528015610138578160200160208202803683370190505b50905060005b835181101561019d5783818151811061015957610159610c10565b602001015160f81c60f81b60f81c82828151811061017957610179610c10565b60ff90921660209283029190910190910152610196600182610c3c565b905061013e565b5092915050565b6060808260ff1611156101ca576040516337f8e71160e21b815260040160405180910390fd5b8160ff166000036101ee576040516337f8e71160e21b815260040160405180910390fd5b60408051436020820152908101849052600090606001604051602081830303815290604052805190602001204485604051602001610236929190918252602082015260400190565b604051602081830303815290604052805190602001204286604051602001610268929190918252602082015260400190565b60408051601f198184030181528282528051602091820120908301949094528101919091526060810191909152608001604051602081830303815290604052905060006102b66001856104f3565b905060008460ff1667ffffffffffffffff8111156102d6576102d6610a2e565b6040519080825280601f01601f191660200182016040528015610300576020820181803683370190505b50905060005b610311600187610c4f565b60ff168160ff161015610479576000848260ff168151811061033557610335610c10565b016020908101516040517fff000000000000000000000000000000000000000000000000000000000000009091169181019190915260210160408051601f198184030181529190528051602090910120905060006103a8826001610399868c610c4f565b6103a39190610c4f565b6109cb565b60ff1690508481815181106103bf576103bf610c10565b602002602001015160f81b848460ff16815181106103df576103df610c10565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350848361041b60018b610c4f565b6104259190610c4f565b60ff168151811061043857610438610c10565b602002602001015185828151811061045257610452610c10565b60ff90921660209283029190910190910152506104729050600182610c68565b9050610306565b508160008151811061048d5761048d610c10565b602002602001015160f81b816001876104a69190610c4f565b60ff16815181106104b9576104b9610c10565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350925050505b92915050565b60608160ff168360ff161115610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4461746146656564733a2057726f6e6720626f72646572730000000000000000604482015260640160405180910390fd5b60006105758484610c4f565b610580906001610c68565b60ff1667ffffffffffffffff81111561059b5761059b610a2e565b6040519080825280602002602001820160405280156105c4578160200160208202803683370190505b50905060005b6105d48585610c4f565b60ff168160ff1611610623576105ea8186610c68565b828260ff16815181106105ff576105ff610c10565b60ff9092166020928302919091019091015261061c600182610c68565b90506105ca565b509392505050565b60408051446020820152439181019190915242606082015260009081906080016040516020818303038152906040528051906020012090506000610671600160316104f3565b905061067b610a10565b60005b60068160ff16101561092957600086610698836004610c68565b60ff16602081106106ab576106ab610c10565b1a60f81b876106bb846003610c68565b60ff16602081106106ce576106ce610c10565b1a60f81b886106de856002610c68565b60ff16602081106106f1576106f1610c10565b1a60f81b89610701866001610c68565b60ff166020811061071457610714610c10565b1a60f81b8a8660ff166020811061072d5761072d610c10565b1a60f81b898760ff166020811061074657610746610c10565b1a60f81b8a610756896001610c68565b60ff166020811061076957610769610c10565b1a60f81b8b6107798a6002610c68565b60ff166020811061078c5761078c610c10565b1a60f81b8c61079c8b6003610c68565b60ff16602081106107af576107af610c10565b1a60f81b8d6107bf8c6004610c68565b60ff16602081106107d2576107d2610c10565b6040517fff000000000000000000000000000000000000000000000000000000000000009b8c166020820152998b1660218b0152978a1660228a0152958916602389015293881660248801529187166025870152861660268601528516602785015284166028840152901a60f81b9091166029820152602a0160408051601f19818403018152919052805160209091012090506000610876826103a3856030610c4f565b60ff16905084818151811061088d5761088d610c10565b6020026020010151848460ff16600681106108aa576108aa610c10565b602002019060ff16908160ff1681525050848360ff16600187516108ce9190610c81565b6108d89190610c81565b815181106108e8576108e8610c10565b602002602001015185828151811061090257610902610c10565b60ff90921660209283029190910190910152506109229050600182610c68565b905061067e565b5080516020808301516040808501516060860151608087015160a088015193517fff0000000000000000000000000000000000000000000000000000000000000060f898891b81169782019790975294871b8616602186015291861b85166022850152851b84166023840152841b8316602483015290921b1660258201526026016040516020818303038152906040526109c290610c94565b95945050505050565b60008160ff166000036109f1576040516337f8e71160e21b815260040160405180910390fd5b6109fc826001610c68565b610a099060ff1684610ce4565b9392505050565b6040518060c001604052806006906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610a5657600080fd5b813567ffffffffffffffff80821115610a6e57600080fd5b818401915084601f830112610a8257600080fd5b813581811115610a9457610a94610a2e565b604051601f8201601f19908116603f01168101908382118183101715610abc57610abc610a2e565b81604052828152876020848701011115610ad557600080fd5b826020860160208301376000928101602001929092525095945050505050565b6020808252825182820181905260009190848201906040850190845b81811015610b3057835160ff1683529284019291840191600101610b11565b50909695505050505050565b803560ff81168114610b4d57600080fd5b919050565b60008060408385031215610b6557600080fd5b82359150610b7560208401610b3c565b90509250929050565b60006020808352835180602085015260005b81811015610bac57858101830151858201604001528201610b90565b506000604082860101526040601f19601f8301168501019250505092915050565b60008060408385031215610be057600080fd5b610be983610b3c565b9150610b7560208401610b3c565b600060208284031215610c0957600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156104ed576104ed610c26565b60ff82811682821603908111156104ed576104ed610c26565b60ff81811683821601908111156104ed576104ed610c26565b818103818111156104ed576104ed610c26565b6000815160208301517fffffffffffff000000000000000000000000000000000000000000000000000080821693506006831015610cdc5780818460060360031b1b83161693505b505050919050565b600082610d0157634e487b7160e01b600052601260045260246000fd5b50069056fea2646970667358221220f5965ba1451203a77e17789170cb2c650dd37a3d549d907a9b0c5f4cc37278a664736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}